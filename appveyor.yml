# Build worker image (VM template)

clone_depth: 5

version: '{build}'

platform:
  - x86
  - x64

configuration:
  - release
  - debug

environment:
  matrix:
    - 
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      build_os: windows
      MSBUILD_FLAGS: /verbosity:minimal /maxcpucount
      generator: "Visual Studio 16"
      generator_x64: "Visual Studio 16"
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6"
    -
      APPVEYOR_BUILD_WORKER_IMAGE: ubuntu
      build_os: linux
      generator_x64: "Unix Makefiles"
    -
      APPVEYOR_BUILD_WORKER_IMAGE: ubuntu
      build_os: javascript
      generator_x64: "Unix Makefiles"
matrix:
  fast_finish: true
  exclude:
    - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu
      platform: x86

# scripts that are called at very beginning, before repo cloning
init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: Invoke-Expression appveyor/${env:build_os}/init.ps1
  - python --version
  - git config --global core.autocrlf input
  - cmake --version
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if (${env:APPVEYOR_REPO_TAG} -eq "true")
      {
        Update-AppveyorBuild -Version "${env:APPVEYOR_REPO_TAG_NAME}"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$(${env:APPVEYOR_REPO_COMMIT}.substring(0,7))"
      }
  - ps: >-
      if (${env:PLATFORM} -eq "x86")
      {
        ${env:cmake_generator}=${env:generator}
        ${env:bits}=32
        ${env:cmake_platform}="Win32"
      }
      elseif (${env:PLATFORM} -eq "x64")
      {
        ${env:cmake_generator}=${env:generator_x64}
        ${env:bits}=64
        ${env:cmake_platform}="x64"
      }
      else
      {
        throw "Platform ${env:platform} unsupported"
      }
  - ps: >-
        if (${env:cmake_generator} -like "Visual Studio 15*")
        {
            ${env:COMPILER}="MSVC15"
        }
        elseif (${env:cmake_generator} -like "Visual Studio 16*")
        {
            ${env:COMPILER}="MSVC16"
        }
        elseif (${env:cmake_generator} -eq "Unix Makefiles")
        {
            ${env:COMPILER}="GCC"
        }
        else
        {
            throw "Generator ${env:cmake_generator} unsupported"
        }

install:
  - git submodule update --init --recursive
  - ps: Invoke-Expression appveyor/${env:build_os}/install.ps1

build_script:
  - cd rapidyaml
  - git apply ../patches/rapidyaml-Allow_stopping_of_parser.patch
  - mkdir build
  - cd build
  - ps: Invoke-Expression appveyor/${env:build_os}/build_rapidyaml.ps1
  - cd ../..
  - cd godot-cpp
  - dir
  - ps: scons --version
  - ps: ${env:g_cpp_target} = ${env:CONFIGURATION}.ToLower()
  - ps: scons platform=${env:build_os} bits=${env:bits} generate_bindings=yes target="${env:g_cpp_target}"
  - cd ..
  - ps: scons platform=${env:build_os} target=${env:CONFIGURATION} bits=${env:bits}

after_build:

  # package dependencies artifact
  - cd demo/bin
  - ps: echo "${env:APPVEYOR_BUILD_FOLDER}/godot-yaml-${env:APPVEYOR_BUILD_VERSION}-${env:COMPILER}-${env:PLATFORM}-${env:CONFIGURATION}.7z"
  - ps: 7z a -t7z -mx9 "${env:APPVEYOR_BUILD_FOLDER}/godot-yaml-${env:APPVEYOR_BUILD_VERSION}-${env:COMPILER}-${env:build_os}-${env:PLATFORM}-${env:CONFIGURATION}.7z"
  - ps: appveyor PushArtifact "${env:APPVEYOR_BUILD_FOLDER}/godot-yaml-${env:APPVEYOR_BUILD_VERSION}-${env:COMPILER}-${env:build_os}-${env:PLATFORM}-${env:CONFIGURATION}.7z"

artifacts:
  - path: 'godot-yaml-*.7z'
    name: GodotYaml

# deploy to Github Releases on tag push
deploy:
  provider: GitHub
  release: 'GodotYaml $(APPVEYOR_REPO_TAG_NAME)'
  tag: $(APPVEYOR_REPO_TAG_NAME)
  artifact: GodotYaml
  draft: false
  prerelease: false
  force_update: true               # overwrite files of existing release on GitHub
  on:
    APPVEYOR_REPO_TAG: true        # deploy on tag push only
  auth_token:                      # encrypted token from GitHub
    secure: 4dm7uTzjL+0fOu5k6huo2PbcGhxj0e7RbXHtkdjiQ1maMLunSup7bdXP4+L58wDV
